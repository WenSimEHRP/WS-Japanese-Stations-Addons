spriteset(s_cargo_contianer){
    // placeholder
    recolour_sprite {} // dummy
    recolour_sprite {
        0..255: 0;
    } // red to blue
    recolour_sprite {
        0..255: 1;
    } // red to green
}
//TODO finish this
//TODO draw cargo sprites

//* ratio of red:blue:green == 4:2:1
//* each variant of cargo contianer has the same possibility of being generated
// we want some random cargo containers, thus we add some random cargo generation
// and also random cargo recolouring.

// here we don't use a random switch, instead we use random_bits_tile to generate a random number
// ahhh false thingy
// we use a random number generator to generate a random number
/*
 * The whole thing works like this:
 * 1. in the spritelayout we define a recolour pool, which is a list of recolour_sprite
 *    and each recolour_sprite has a list of recolour rules which could be used by the sprites
 * 2. we use random_bits_tile and random_bits_station to randomly generate the container wagon
 *    pattern. Animaiton frame is also used to randomly update the container wagon.
 * 3. The pattern is actually "defined" in random_bits_tile.
 */
//! random_bits_tile is very limited


spritelayout sl_cargo_container_platform {
    //...
    building { // platform
        sprite: CUSTOM(...);
        hide_sprite: ...;
    }
    #define CONTAINER_SPRITE(num)\
    childsprite {\
        sprite: CUSTOM(...);\
        hide_sprite: getbits(random_bits_tile, 2, 3) > num;}\
    childsprite { // cargo container, level 1 position 0
        sprite: CUSTOM(...);
        hide_sprite: getbits(random_bits_tile, 2, 3) > 0;
    }
}

switch(FEAT_STATIONS, SELF, sw_cargo_station, [
    STORE_TEMP(0,0) // climite
    STORE_TEMP(0,1) // era
    STORE_TEMP(0,2) // animation frame
    //...
    STORE_TEMP(random_bits_tile, 13) // range of random_bits_tile is 0..15
])

