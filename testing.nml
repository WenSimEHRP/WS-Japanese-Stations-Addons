railtypetable {
    RAIL,
    ELRL,
    MONO,
    MGLV,
    ELECTRIFIED:[
        ELRL,
    ],
    ORIGINAL_RAIL:[
        RAIL, ELRL, MONO, MGLV
    ]
}

cargotable {
    PASS, MAIL
}

#define SIZE_X 64
#define SIZE_Y 64
#define SIZE_X_EXTENDED 64*3
#define SIZE_Y_EXTENDED 64*3

#define PATH "src/stations/generated_stations/gfx/" + name + ".png"
// offset part

template t_barrier_0(name) {[(SIZE_X + 1)*0, 0, SIZE_X, SIZE_Y, -31, -33, PATH]}
template t_barrier_1(name) {[(SIZE_X + 1)*1, 0, SIZE_X, SIZE_Y,  -7, -45, PATH]}
template t_barrier_2(name) {[(SIZE_X + 1)*2, 0, SIZE_X, SIZE_Y, -31, -33, PATH]}
template t_barrier_3(name) {[(SIZE_X + 1)*3, 0, SIZE_X, SIZE_Y, -63, -47, PATH]}

template t_fence_0(name) {[(SIZE_X + 1)*0, 0, SIZE_X, SIZE_Y, -31, -34, PATH]}
template t_fence_1(name) {[(SIZE_X + 1)*1, 0, SIZE_X, SIZE_Y,  -1, -48, PATH]}
template t_fence_2(name) {[(SIZE_X + 1)*2, 0, SIZE_X, SIZE_Y, -31, -34, PATH]}
template t_fence_3(name) {[(SIZE_X + 1)*3, 0, SIZE_X, SIZE_Y, -61, -48, PATH]}
template t_fence_4(name) {[(SIZE_X + 1)*4, 0, SIZE_X, SIZE_Y, -31, -34, PATH]}
template t_fence_5(name) {[(SIZE_X + 1)*5, 0, SIZE_X, SIZE_Y,  -1, -48, PATH]}
template t_fence_6(name) {[(SIZE_X + 1)*6, 0, SIZE_X, SIZE_Y, -31, -34, PATH]}
template t_fence_7(name) {[(SIZE_X + 1)*7, 0, SIZE_X, SIZE_Y, -61, -48, PATH]}

template t_nochange(name, x) {[(SIZE_X + 1)*x, 0, SIZE_X, SIZE_Y, 0, 0, PATH]}

spriteset (s_dummy, "src/stations/generated_stations/gfx/dec_dummy.png") {
    [0,0,1,1,0,0] // 01
    [0,0,1,1,0,0] // 02
    [0,0,1,1,0,0] // 03
    [0,0,1,1,0,0] // 04
    [0,0,1,1,0,0] // 05
    [0,0,1,1,0,0] // 06
    [0,0,1,1,0,0] // 07
    [0,0,1,1,0,0] // 08
    [0,0,1,1,0,0] // 09
    [0,0,1,1,0,0] // 10
    [0,0,1,1,0,0] // 11
    [0,0,1,1,0,0] // 12
    [0,0,1,1,0,0] // 13
    [0,0,1,1,0,0] // 14
    [0,0,1,1,0,0] // 15
    [0,0,1,1,0,0] // 16
}

spriteset (s_bufferstop) {
    NE:   t_barrier_0("dec_barrier")
    SW:   t_barrier_1("dec_barrier")
    NW:   t_barrier_2("dec_barrier")
    SE:   t_barrier_3("dec_barrier")
}

spriteset (s_fence_test_station) {
    NE:   t_fence_0("dec_test_station_fence")
    SW:   t_fence_1("dec_test_station_fence")
    NW:   t_fence_2("dec_test_station_fence")
    SE:   t_fence_3("dec_test_station_fence")
    NE_s: t_fence_4("dec_test_station_fence") // special case
    SW_s: t_fence_5("dec_test_station_fence") // special case
    NW_s: t_fence_6("dec_test_station_fence") // special case
    SE_s: t_fence_7("dec_test_station_fence") // special case
}

spriteset (s_people_test_station) {
    t_nochange("dec_test_station_people",0)
    t_nochange("dec_test_station_people",1)
    t_nochange("dec_test_station_people",2)
    t_nochange("dec_test_station_people",3)
}

spriteset (s_test_station) {
    X:       t_platform_0("st1_cargo_platform")
    X1:      t_platform_1("st1_cargo_platform")
    Y:       t_platform_2("st1_cargo_platform")
    Y1:      t_platform_3("st1_cargo_platform")
}

spriteset (s_snow_test_station) {
    t_nochange("snow_test_station",0)
    t_nochange("snow_test_station",1)
    t_nochange("snow_test_station",2)
    t_nochange("snow_test_station",3)
}

spritelayout sl_test_station_x {
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    childsprite {sprite: LOAD_TEMP(12) + 1 + ((LOAD_TEMP(0)) != 0) * 26; hide_sprite: (LOAD_TEMP(12) == 1);}
    building { // fence
        sprite: CUSTOM(1,0 + LOAD_TEMP(3) * 4);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5);
    }
    building { // fence
        sprite: CUSTOM(1,1 + LOAD_TEMP(4) * 4);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6);
    }
    building { // fence
        sprite: CUSTOM(1,2);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);
    }
    building { // fence
        sprite: CUSTOM(1,3);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);
    }
    building { // bufferstop
        sprite: CUSTOM(0,0);
        xextent: 4;
        zextent: 8;
        hide_sprite: LOAD_TEMP(3);
    }
    building { // bufferstop
        sprite: CUSTOM(0,1);
        xoffset: 12;
        xextent: 4;
        zextent: 8;
        hide_sprite: LOAD_TEMP(4);
    }
    building { // platform
        sprite: CUSTOM(2,0);
        xoffset: 0;
        yoffset: 0;
        zoffset: 0;
        xextent: 16;
        yextent: 6;
        zextent: 6;
        hide_sprite: LOAD_TEMP(9);
    }
    childsprite {
        sprite: CUSTOM(3,0);
        hide_sprite: LOAD_TEMP(0) != 2;
    }
    childsprite {
        sprite: DEFAULT(0);
    }
    building { //platform
        sprite: CUSTOM(2,1);
        xoffset: 0;
        yoffset: 10;
        zoffset: 0;
        xextent: 16;
        yextent: 6;
        zextent: 6;
        hide_sprite: LOAD_TEMP(10);
    }
    childsprite {
        sprite: CUSTOM(3,1);
        hide_sprite: LOAD_TEMP(0) != 2;
    }
    childsprite {
        sprite: DEFAULT(1);
    }

}

spritelayout sl_test_station_y {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    childsprite {sprite: LOAD_TEMP(12) + ((LOAD_TEMP(0)) != 0) * 26; hide_sprite: (LOAD_TEMP(12) == 1);}
    building { // fence
        sprite: CUSTOM(1,2 + LOAD_TEMP(3) * 4);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5);
    }
    building { // fence
        sprite: CUSTOM(1,3 + LOAD_TEMP(4) * 4);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6);
    }
    building { // fence
        sprite: CUSTOM(1,0);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);
    }
    building { // fence
        sprite: CUSTOM(1,1);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);
    }
    building { // bufferstop
        sprite: CUSTOM(0,2);
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(3);
    }
    building { // bufferstop
        sprite: CUSTOM(0,3);
        yoffset: 15;
        yextent: 1;
        zextent: 6;
        hide_sprite: LOAD_TEMP(4);
    }
    building { // platform
        sprite: CUSTOM(2,2);
        xoffset: 0;
        yoffset: 0;
        zoffset: 0;
        xextent: 6;
        yextent: 16;
        zextent: 6;
        hide_sprite: LOAD_TEMP(9);
    }
    childsprite {
        sprite: CUSTOM(3,2);
        hide_sprite: LOAD_TEMP(0) != 2;
    }
    childsprite {
        sprite: DEFAULT(2);
    }
    building { // platform
        sprite: CUSTOM(2,3);
        xoffset: 10;
        yoffset: 0;
        zoffset: 0;
        xextent: 6;
        yextent: 16;
        zextent: 6;
        hide_sprite: LOAD_TEMP(10);
    }
    childsprite {
        sprite: CUSTOM(3,3);
        hide_sprite: LOAD_TEMP(0) != 2;
    }
    childsprite {
        sprite: DEFAULT(3);
    }
}

/* About STORE_TEMP registers
    * 0:  terrain type, for snow and desert
    * 1:  build date, for date-dependent graphics
    * 2:  animation frame, for animated stations
    * 3:  bufferstop
    * 4:  bufferstop
    * 5:  nearby station, bufferstop direction
    * 6:  nearby station, bufferstop direction
    * 7:  nearby station, not bufferstop direction, also with landscape
    * 8:  nearby station, not bufferstop direction, also with landscape
    * 9:  show platform, northern side
    * 10: show platform, southern side
    * 11: platform start and end
    * 12: track type

    TODO: Add shed support
    TODO: Add station decal support
    TODO: Make a universal template
*/
switch (FEAT_STATIONS, SELF, sw_test_station_0, [
    STORE_TEMP((terrain_type == TILETYPE_SNOW  ) << 1|
               (terrain_type == TILETYPE_DESERT) << 0, 0), // returns 1|2 for snow|desert
    STORE_TEMP(build_date < date(1952, 1, 1) ? 0:
               build_date < date(1986, 1, 1) ? 1: 2, 1), // returns 1 if build date is before 1952, 2 if before 1986
    STORE_TEMP(animation_frame, 2), // animation frames
    STORE_TEMP(hasbit(rail_continuation, 1), 3), // bufferstop
    STORE_TEMP(hasbit(rail_continuation, 0), 4), // bufferstop
    STORE_TEMP(nearby_tile_is_station(-1, 0), 5), // get nearby station tiles
    STORE_TEMP(nearby_tile_is_station( 1, 0), 6), // get nearby station tiles
    STORE_TEMP(nearby_tile_is_station( 0,-1) &&   // also get the landscape
               (!hasbit(nearby_tile_slope(0,0), CORNER_S) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_W) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_N)), 7),
    STORE_TEMP(nearby_tile_is_station( 0, 1) &&
               (!hasbit(nearby_tile_slope(0,0), CORNER_N) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_E) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_S)), 8),
    STORE_TEMP(0, 9),  // show platform, northern side
    STORE_TEMP(0, 10), // show platform, southern side
    STORE_TEMP(platform_position_from_start(PLATFORM_SAME_SECTION) << 1|
                   platform_number_from_end(PLATFORM_SAME_SECTION) << 0, 11), // for platform start and end
    STORE_TEMP(track_type == RAIL ? 1011 :
               track_type == ELRL ? 1011 :
               track_type == MONO ? 1093 :
               track_type == MGLV ? 1175 : 1, 12), // original rail, newgrf rails won't work
]){return;}

switch (FEAT_STATIONS, SELF, sw_test_station_1, [
    STORE_TEMP(0,0),
    STORE_TEMP(build_date < date(1952, 1, 1) ? 1 : build_date < date(1986, 1, 1) ? 2 : 0, 1),
    STORE_TEMP(1,2),
    STORE_TEMP(0,3),
    STORE_TEMP(1,4),
    STORE_TEMP(0,5),
    STORE_TEMP(1,6),
    STORE_TEMP(1,7),
    STORE_TEMP(1,8),
    STORE_TEMP(0,9),
    STORE_TEMP(0,10),
    STORE_TEMP(1,11),
    STORE_TEMP(1,12),
]){return;}

spritegroup sg_people_test_station {
    little: s_people_test_station;
    lots:   s_people_test_station;
}

item (FEAT_STATIONS, stn_test_station_0) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x, sl_test_station_y];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}
