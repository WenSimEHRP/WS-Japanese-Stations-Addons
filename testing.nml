railtypetable {
    RAIL,
    ELRL,
    MONO,
    MGLV,
    ELECTRIFIED:[
        ELRL,
    ],
    ORIGINAL_RAIL:[
        RAIL, ELRL, MONO, MGLV
    ]
}

cargotable {
    PASS, MAIL
}

// we use recolour here to save space and time
spriteset(platform_recolour_0) {
    recolour_sprite {} // dummy
    recolour_sprite {  // white stripe
        0x41: 0x0C;
        0x42: 0x0D;
    }
    recolour_sprite {  // bare ground
        0x41: 0x08;
        0x42: 0x08;
    }
}

//#define SIZE_X 64
//#define SIZE_Y 64
//#define SIZE_X_EXTENDED 64*3
//#define SIZE_Y_EXTENDED 64*3

//#define PATH "src/stations/generated_stations/gfx/" + name + ".png"
// offset part

template t_barrier_0(name) {[(SIZE_X + 2)*0, 0, SIZE_X, SIZE_Y, -31-4, -33-4, PATH]}
template t_barrier_1(name) {[(SIZE_X + 2)*1, 0, SIZE_X, SIZE_Y,  -7-4, -45-4, PATH]}
template t_barrier_2(name) {[(SIZE_X + 2)*2, 0, SIZE_X, SIZE_Y, -31-4, -33-4, PATH]}
template t_barrier_3(name) {[(SIZE_X + 2)*3, 0, SIZE_X, SIZE_Y, -55-4, -45-4, PATH]}

template t_fence_0(name)  {[(SIZE_X + 2)*0,  0, SIZE_X, SIZE_Y, -31-4, -34-4, PATH]}
template t_fence_1(name)  {[(SIZE_X + 2)*1,  0, SIZE_X, SIZE_Y,  -1-4, -48-4, PATH]}
template t_fence_2(name)  {[(SIZE_X + 2)*2,  0, SIZE_X, SIZE_Y, -31-4, -34-4, PATH]}
template t_fence_3(name)  {[(SIZE_X + 2)*3,  0, SIZE_X, SIZE_Y, -61-4, -48-4, PATH]}
template t_fence_4(name)  {[(SIZE_X + 2)*4,  0, SIZE_X, SIZE_Y, -31-4, -34-4, PATH]}
template t_fence_5(name)  {[(SIZE_X + 2)*5,  0, SIZE_X, SIZE_Y,  -1-4, -48-4, PATH]}
template t_fence_6(name)  {[(SIZE_X + 2)*6,  0, SIZE_X, SIZE_Y, -31-4, -34-4, PATH]}
template t_fence_7(name)  {[(SIZE_X + 2)*7,  0, SIZE_X, SIZE_Y, -61-4, -48-4, PATH]}
template t_fence_8(name)  {[(SIZE_X + 2)*8,  0, SIZE_X, SIZE_Y, -49-4, -43-4, PATH]}
template t_fence_9(name)  {[(SIZE_X + 2)*9,  0, SIZE_X, SIZE_Y, -19-4, -57-4, PATH]}
template t_fence_10(name) {[(SIZE_X + 2)*10, 0, SIZE_X, SIZE_Y,   -17,   -47, PATH]}
template t_fence_11(name) {[(SIZE_X + 2)*11, 0, SIZE_X, SIZE_Y,   -47, -57-4, PATH]}

template t_nochange(name, x) {[(SIZE_X + 2)*x, 0, SIZE_X, SIZE_Y, 0, 0, PATH]}

spriteset (s_dummy, "src/stations/generated_stations/gfx/dec_dummy.png") {
    [0,0,1,1,0,0] // 01
    [0,0,1,1,0,0] // 02
    [0,0,1,1,0,0] // 03
    [0,0,1,1,0,0] // 04
    [0,0,1,1,0,0] // 05
    [0,0,1,1,0,0] // 06
    [0,0,1,1,0,0] // 07
    [0,0,1,1,0,0] // 08
    [0,0,1,1,0,0] // 09
    [0,0,1,1,0,0] // 10
    [0,0,1,1,0,0] // 11
    [0,0,1,1,0,0] // 12
    [0,0,1,1,0,0] // 13
    [0,0,1,1,0,0] // 14
    [0,0,1,1,0,0] // 15
    [0,0,1,1,0,0] // 16
}

spriteset (s_bufferstop) {
    NE:   t_barrier_0("dec_barrier")
    SW:   t_barrier_1("dec_barrier")
    NW:   t_barrier_2("dec_barrier")
    SE:   t_barrier_3("dec_barrier")
}

spriteset (s_fence_test_station) {
    t_fence_0("dec_test_station_fence")
    t_fence_1("dec_test_station_fence")
    t_fence_2("dec_test_station_fence")
    t_fence_3("dec_test_station_fence")
    // platform fences
    t_fence_4("dec_test_station_fence")
    t_fence_5("dec_test_station_fence")
    t_fence_6("dec_test_station_fence")
    t_fence_7("dec_test_station_fence")
    t_fence_8("dec_test_station_fence")
    t_fence_9("dec_test_station_fence")
    t_fence_10("dec_test_station_fence")
    t_fence_11("dec_test_station_fence")
}

spriteset (s_fence_test_station_1, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP) {
    t_fence_0("dec_test_station_fence_1")
    t_fence_1("dec_test_station_fence_1")
    t_fence_2("dec_test_station_fence_1")
    t_fence_3("dec_test_station_fence_1")
    // platform fences
    t_fence_4("dec_test_station_fence_1")
    t_fence_5("dec_test_station_fence_1")
    t_fence_6("dec_test_station_fence_1")
    t_fence_7("dec_test_station_fence_1")
    t_fence_8("dec_test_station_fence_1")
    t_fence_9("dec_test_station_fence_1")
    t_fence_10("dec_test_station_fence_1")
    t_fence_11("dec_test_station_fence_1")
}

spriteset (s_people_test_station) {
    t_nochange("dec_test_station_people",0)
    t_nochange("dec_test_station_people",1)
    t_nochange("dec_test_station_people",2)
    t_nochange("dec_test_station_people",3)
}

spriteset (s_test_station) {
    t_platform_0("dec_test_station_0")
    t_platform_1("dec_test_station_0")
    t_platform_2("dec_test_station_0")
    t_platform_3("dec_test_station_0")
    t_platform_0("dec_test_station_00")
    t_platform_1("dec_test_station_00")
    t_platform_2("dec_test_station_00")
    t_platform_3("dec_test_station_00")
    t_platform_0("dec_test_station_01")
    t_platform_1("dec_test_station_01")
    t_platform_2("dec_test_station_01")
    t_platform_3("dec_test_station_01")
    t_platform_0("dec_test_station_02")
    t_platform_1("dec_test_station_02")
    t_platform_2("dec_test_station_02")
    t_platform_3("dec_test_station_02") // 16 in total, 4 per group, 4 groups, 4 platforms
    // recolour rules, index starts from 16
    recolour_sprite {} // dummy
    recolour_sprite {  // white stripe
        0x41: 0x0C;
        0x42: 0x0D;
    }
    recolour_sprite {  // bare ground
        0x41: 0x08;
        0x42: 0x08;
    }
}

spriteset (s_snow_test_station) {
    t_nochange("snow_test_station",0)
    t_nochange("snow_test_station",1)
    t_nochange("snow_test_station",2)
    t_nochange("snow_test_station",3)
}

spriteset (s_decal_0_test_station) {
    t_nochange("dec_test_station_decal_0",0)
    t_nochange("dec_test_station_decal_0",1)
    t_nochange("dec_test_station_decal_0",2)
    t_nochange("dec_test_station_decal_0",3)
    t_nochange("dec_test_station_decal_0",4)
    t_nochange("dec_test_station_decal_0",5)
    t_nochange("dec_test_station_decal_0",6)
    t_nochange("dec_test_station_decal_0",7)
}

spriteset (s_shed_0_test_station) {
    t_nochange("dec_test_station_shed_0",0)
    t_nochange("dec_test_station_shed_0",1)
    t_nochange("dec_test_station_shed_0",2)
    t_nochange("dec_test_station_shed_0",3)
    t_nochange("dec_test_station_shed_0",4)
    t_nochange("dec_test_station_shed_0",5)
    t_nochange("dec_test_station_shed_0",6)
    t_nochange("dec_test_station_shed_0",7)
    recolour_sprite {} // dummy
    recolour_sprite { // era 2
        179: 113;
        123: 108;
        113: 112;
        112: 105;
        106: 112;
        105: 105;
        104: 104;
    }
    recolour_sprite { // era 1
        179: 35;
        123: 36;
        112: 35;
        113: 36;
        106: 36;
        105: 34;
        104: 5;
        14:  5;
        13:  4;
        12:  3;
        10:  2;
        3:   6;
    }
}

spriteset(s_shed_1_test_station) {
    t_nochange("dec_test_station_shed_1",0)
    t_nochange("dec_test_station_shed_1",1)
    t_nochange("dec_test_station_shed_1",2)
    t_nochange("dec_test_station_shed_1",3)
    t_nochange("dec_test_station_shed_1",4)
    t_nochange("dec_test_station_shed_1",5)
    t_nochange("dec_test_station_shed_1",6)
    t_nochange("dec_test_station_shed_1",7)
    recolour_sprite {} // dummy
    recolour_sprite {
        16..23: 32..39; // era 2
    }
    recolour_sprite {
        16..23: 104..111;// era 1
    }

}

//TODO finish decal and shed support

spritelayout sl_test_station_x(platform_state, hide_decals) {
    ground {sprite: GROUNDSPRITE_RAIL_X;}
    childsprite {sprite: LOAD_TEMP(12) + 1 + ((LOAD_TEMP(0)) != 0) * 26; hide_sprite: (LOAD_TEMP(12) == 1);}
    building { // fence, along track side north
        sprite: CUSTOM(1,0);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5) || LOAD_TEMP(3);}
    building { // fence, alt north north
        sprite: CUSTOM(1,0+4);
        xextent: 1;
        yextent: 6;
        zextent: 8;
        hide_sprite: getbits(platform_state, 1, 1) || LOAD_TEMP(5) && LOAD_TEMP(3);}
    building { // fence, alt north south
        sprite: CUSTOM(1,0+4+1);
        xoffset: 15;
        xextent: 1;
        yextent: 6;
        zextent: 8;
        hide_sprite: getbits(platform_state, 1, 1) || LOAD_TEMP(6) && LOAD_TEMP(4);}
    building { // fence, along track side south
        sprite: CUSTOM(1,1);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6) || LOAD_TEMP(4);}
    building { // fence, alt south north
        sprite: CUSTOM(1,0+4+4);
        xextent: 1;
        yoffset: 9;
        yextent: 6;
        zextent: 8;
        hide_sprite: getbits(platform_state, 0, 1) || LOAD_TEMP(5) && LOAD_TEMP(3);}
    building { // fence, alt south south
        sprite: CUSTOM(1,0+4+4+1);
        xoffset: 15;
        xextent: 1;
        yoffset: 9;
        yextent: 6;
        zextent: 8;
        hide_sprite: getbits(platform_state, 0, 1) || LOAD_TEMP(6) && LOAD_TEMP(4);}
    building { // fence
        sprite: CUSTOM(1,2);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);}
    building { // fence
        sprite: CUSTOM(1,3);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);}
    building { // bufferstop
        sprite: CUSTOM(0,0);
        xextent: 8;
        zextent: 8;
        hide_sprite: LOAD_TEMP(3);}
    building { // bufferstop
        sprite: CUSTOM(0,1);
        xoffset: 12;
        xextent: 3;
        yextent: 8;
        zextent: 8;
        hide_sprite: LOAD_TEMP(4);}
    building { // platform, nothern side
        sprite: CUSTOM(2,0 + LOAD_TEMP(11) * 4);
        xoffset: 0;
        yoffset: 0;
        zoffset: 0;
        xextent: 16;
        yextent: 6;
        zextent: 6;
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(2, LOAD_TEMP(1) + 16);
        hide_sprite: getbits(platform_state, 1, 1);}
    childsprite { // platform snow
        sprite: CUSTOM(3,0);
        hide_sprite: !getbits(hide_decals, 1, 1) || LOAD_TEMP(0) != 2;}
    childsprite { // people on platform
        sprite: DEFAULT(0);}
    childsprite { // platform decals, style varys
        sprite: CUSTOM(4,0);
        hide_sprite: getbits(hide_decals, 0, 1);}
    childsprite { // platform decals snow
        sprite: CUSTOM(4,0+4); // if there are shed snow is not shown
        hide_sprite: !hide_decals || (LOAD_TEMP(0) != 2);}
    childsprite { // sheds
        sprite: CUSTOM(4,0);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(4,(LOAD_TEMP(1)) + 8);
        hide_sprite: getbits(hide_decals, 1, 1);}
    childsprite { // sheds snow
        sprite: CUSTOM(4,0+4);
        hide_sprite: getbits(hide_decals, 1, 1) || (LOAD_TEMP(0) != 2);}
    building { //platform, southern side
        sprite: CUSTOM(2,1 + LOAD_TEMP(11) * 4);
        xoffset: 0;
        yoffset: 10;
        zoffset: 0;
        xextent: 16;
        yextent: 6;
        zextent: 6;
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(2, LOAD_TEMP(1) + 16);
        hide_sprite: getbits(platform_state, 0, 1);}
    childsprite { // snow on platform
        sprite: CUSTOM(3,1);
        hide_sprite: !getbits(hide_decals, 1, 1) ||LOAD_TEMP(0) != 2;}
    childsprite { // people on platform
        sprite: DEFAULT(1);}
    childsprite { // platform decals, style varys
        sprite: CUSTOM(4,1);
        hide_sprite: getbits(hide_decals, 0, 1);}
    childsprite { // platform decals snow
        sprite: CUSTOM(4,1+4); // if there are shed snow is not shown
        hide_sprite: !hide_decals || (LOAD_TEMP(0) != 2);}
    childsprite { // sheds
        sprite: CUSTOM(4,1);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(4,(LOAD_TEMP(1)) + 8);
        hide_sprite: getbits(hide_decals, 1, 1);}
    childsprite { // sheds snow
        sprite: CUSTOM(4,1+4);
        hide_sprite: getbits(hide_decals, 1, 1) || (LOAD_TEMP(0) != 2);}

}

spritelayout sl_test_station_y(platform_state, hide_decals) {
    ground {sprite: GROUNDSPRITE_RAIL_Y;}
    childsprite {sprite: LOAD_TEMP(12) + ((LOAD_TEMP(0)) != 0) * 26; hide_sprite: (LOAD_TEMP(12) == 1);}
    building { // fence, along track side north
        sprite: CUSTOM(1,2);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5) || LOAD_TEMP(3);
    }
    building { // fence, alt north north
        sprite: CUSTOM(1,2+4);
        xextent: 6;
        yextent: 1;
        zextent: 8;
        hide_sprite: getbits(platform_state, 1, 1) || LOAD_TEMP(5) && LOAD_TEMP(3);
    }
    building { // fence, alt north south
        sprite: CUSTOM(1,2+4+1);
        yoffset: 15;
        xextent: 6;
        yextent: 1;
        zextent: 8;
        hide_sprite: getbits(platform_state, 1, 1) || LOAD_TEMP(6) && LOAD_TEMP(4);
    }
    building { // fence, along track side south
        sprite: CUSTOM(1,3);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6) || LOAD_TEMP(4);
    }
    building { // fence, alt south north
        sprite: CUSTOM(1,10);
        xoffset: 9;
        xextent: 6;
        yextent: 1;
        zextent: 8;
        hide_sprite: getbits(platform_state, 0, 1) || LOAD_TEMP(5) && LOAD_TEMP(3);
    }
    building { // fence, alt south south
        sprite: CUSTOM(1,11);
        xoffset: 9;
        yoffset: 15;
        xextent: 6;
        yextent: 1;
        zextent: 8;
        hide_sprite: getbits(platform_state, 0, 1) || LOAD_TEMP(6) && LOAD_TEMP(4);
    }
    building { // fence
        sprite: CUSTOM(1,0);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);
    }
    building { // fence
        sprite: CUSTOM(1,1);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);
    }
    building { // bufferstop
        sprite: CUSTOM(0,2);
        yextent: 8;
        zextent: 8;
        hide_sprite: LOAD_TEMP(3);
    }
    building { // bufferstop
        sprite: CUSTOM(0,3);
        yoffset: 12;
        yextent: 3;
        xextent: 8;
        zextent: 8;
        hide_sprite: LOAD_TEMP(4);
    }
    building { // platform
        sprite: CUSTOM(2,2 + LOAD_TEMP(11) * 4);
        xoffset: 0;
        yoffset: 0;
        zoffset: 0;
        xextent: 6;
        yextent: 16;
        zextent: 6;
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(platform_state, 1, 1);
    }
    childsprite { // platform snow
        sprite: CUSTOM(3,2);
        hide_sprite: LOAD_TEMP(0) != 2;
    }
    childsprite { // people on platform
        sprite: DEFAULT(2);
    }
    childsprite { // platform decals, style varys
        sprite: CUSTOM(4,2);
        hide_sprite: getbits(hide_decals, 0, 1);
    }
    childsprite { // platform decals snow
        sprite: CUSTOM(4,2+4); // if there are shed snow is not shown
        hide_sprite: !hide_decals || (LOAD_TEMP(0) != 2);
    }
    childsprite { // sheds
        sprite: CUSTOM(4,2);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(4,(LOAD_TEMP(1)) + 8);
        hide_sprite: getbits(hide_decals, 1, 1);
    }
    childsprite { // sheds snow
        sprite: CUSTOM(4,2+4);
        hide_sprite: getbits(hide_decals, 1, 1) || (LOAD_TEMP(0) != 2);
    }
    building { // platform
        sprite: CUSTOM(2,3 + LOAD_TEMP(11) * 4);
        xoffset: 10;
        yoffset: 0;
        zoffset: 0;
        xextent: 6;
        yextent: 16;
        zextent: 6;
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(platform_state, 0, 1);
    }
    childsprite { // snow on platform
        sprite: CUSTOM(3,3);
        hide_sprite: LOAD_TEMP(0) != 2;
    }
    childsprite { // people on platform
        sprite: DEFAULT(3);
    }
    childsprite { // platform decals, style varys
        sprite: CUSTOM(4,3);
        hide_sprite: getbits(hide_decals, 0, 1);
    }
    childsprite { // platform decals snow
        sprite: CUSTOM(4,3+4); // if there are shed snow is not shown
        hide_sprite: !hide_decals || (LOAD_TEMP(0) != 2);
    }
    childsprite { // sheds
        sprite: CUSTOM(4,3);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(4,(LOAD_TEMP(1)) + 8);
        hide_sprite: getbits(hide_decals, 1, 1);
    }
    childsprite { // sheds snow
        sprite: CUSTOM(4,3+4);
        hide_sprite: getbits(hide_decals, 1, 1) || (LOAD_TEMP(0) != 2);
    }
}

/* About STORE_TEMP registers
    * 0:  terrain type, for snow and desert
    * 1:  build date, for date-dependent graphics
    * 2:  animation frame, for animated stations
    * 3:  bufferstop
    * 4:  bufferstop
    * 5:  nearby station, bufferstop direction
    * 6:  nearby station, bufferstop direction
    * 7:  nearby station, not bufferstop direction, also with landscape
    * 8:  nearby station, not bufferstop direction, also with landscape
    * 9:  show platform, northern side
    * 10: show platform, southern side
    * 11: platform start and end
    * 12: track type

    TODO: Make a universal template
*/
switch (FEAT_STATIONS, SELF, sw_test_station_0, [
    STORE_TEMP((terrain_type == TILETYPE_SNOW  ) << 1|
               (terrain_type == TILETYPE_DESERT) << 0, 0), // returns 1|2 for desert|snow
    STORE_TEMP(param_build_date >= 2 ?
               param_build_date - 2:
               param_build_date ?
                (current_date < date(1952, 1, 1)) +
                (current_date < date(1986, 1, 1)) :
                (build_date   < date(1952, 1, 1)) +
                (build_date   < date(1986, 1, 1)) , 1), // returns 2 if build date is before 1952, 1 if before 1986
    STORE_TEMP(animation_frame, 2), // animation frames
    STORE_TEMP(hasbit(rail_continuation, 1), 3), // bufferstop
    STORE_TEMP(hasbit(rail_continuation, 0), 4), // bufferstop
    STORE_TEMP(nearby_tile_is_station(-1, 0), 5), // get nearby station tiles
    STORE_TEMP(nearby_tile_is_station( 1, 0), 6), // get nearby station tiles
    STORE_TEMP(nearby_tile_is_station( 0,-1) &&   // also get the landscape
               (!hasbit(nearby_tile_slope(0,0), CORNER_S) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_W) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_N)), 7),
    STORE_TEMP(nearby_tile_is_station( 0, 1) &&
               (!hasbit(nearby_tile_slope(0,0), CORNER_N) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_E) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_S)), 8),
    //STORE_TEMP(0, 9),  // show platform, northern side
    //STORE_TEMP(0, 10), // show platform, southern side
    STORE_TEMP(!(nearby_tile_is_station( 1, 0)) << 1|
               !(nearby_tile_is_station(-1, 0)) << 0, 11), // for platform start and end
    STORE_TEMP(track_type == RAIL ? 1011 :
               track_type == ELRL ? 1011 :
               track_type == MONO ? 1093 :
               track_type == MGLV ? 1175 : 1, 12), // original rail, newgrf rails won't work
    STORE_TEMP(cargo_amount_waiting(bitmask(CC_PASSENGERS)), 13), // people waiting
]){return;}

switch (FEAT_STATIONS, SELF, sw_test_station_1, [
    STORE_TEMP(0,0),
    STORE_TEMP(param_build_date >= 2 ?
               param_build_date - 2:
               param_build_date ?
                (current_date < date(1952, 1, 1)) +
                (current_date < date(1986, 1, 1)) :
                (build_date   < date(1952, 1, 1)) +
                (build_date   < date(1986, 1, 1)) , 1),
    STORE_TEMP(1,2),
    STORE_TEMP(0,3),
    STORE_TEMP(1,4),
    STORE_TEMP(0,5),
    STORE_TEMP(1,6),
    STORE_TEMP(1,7),
    STORE_TEMP(1,8),
    //STORE_TEMP(0,9),
    //STORE_TEMP(0,10),
    STORE_TEMP(3,11),
    STORE_TEMP(1,12),
]){return;}

spritegroup sg_people_test_station {
    little: s_people_test_station;
    lots:   s_people_test_station;
}

item (FEAT_STATIONS, stn_test_station_0) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(0,0), sl_test_station_y(0,0)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_shed_0_test_station];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_0_shed_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(0,0), sl_test_station_y(0,0)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_shed_1_test_station];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_noshed) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(0,3), sl_test_station_y(0,3)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_dummy];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_1_shed_0) {
    property {
        class: "WSJT";
        classname: string(CLS_WSJT);
        name: string(STN_TEST_STATION);
        draw_pylon_tiles: STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts: [sl_test_station_x(1, 0), sl_test_station_y(1, 0)];
        custom_spritesets: [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_shed_0_test_station, s_dummy];
        prepare_layout: sw_test_station_0();
        purchase_prepare_layout: sw_test_station_1();
        default: s_dummy;
        PASS: sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_1_shed_1) {
    property {
        class: "WSJT";
        classname: string(CLS_WSJT);
        name: string(STN_TEST_STATION);
        draw_pylon_tiles: STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts: [sl_test_station_x(1, 0), sl_test_station_y(1, 0)];
        custom_spritesets: [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_shed_1_test_station, s_dummy];
        prepare_layout: sw_test_station_0();
        purchase_prepare_layout: sw_test_station_1();
        default: s_dummy;
        PASS: sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(1, 3), sl_test_station_y(1, 3)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_dummy, s_dummy];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_2_shed_0) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(2,0), sl_test_station_y(2,0)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_shed_0_test_station, s_dummy];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_2_shed_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(2,0), sl_test_station_y(2,0)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_shed_1_test_station, s_dummy];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_2) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(2,3), sl_test_station_y(2,3)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station, s_test_station, s_snow_test_station, s_dummy, s_dummy];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_0_fence_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(0,0), sl_test_station_y(0,0)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station_1, s_test_station, s_snow_test_station, s_shed_0_test_station];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_0_shed_1_fence_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(0,0), sl_test_station_y(0,0)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station_1, s_test_station, s_snow_test_station, s_shed_1_test_station];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_test_station_noshed_fence_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_test_station_x(0,3), sl_test_station_y(0,3)];
        custom_spritesets:          [s_bufferstop, s_fence_test_station_1, s_test_station, s_snow_test_station, s_dummy];
        prepare_layout:             sw_test_station_0();
        purchase_prepare_layout:    sw_test_station_1();
        default:                    s_dummy;
        PASS:                       sg_people_test_station;
    }
}

template t_full     (name, x) {[(SIZE_X + 2)*x, 0, SIZE_X, SIZE_Y, -31-4, -33-4, NOCROP, PATH]}
//template t_full_crop(name, x) {[(SIZE_X + 2)*x, 0, SIZE_X, SIZE_Y, -31, -33, CROP  , PATH]}

#define RANDOM(min, max) ((min) + (__LINE__ * 1145141919 + 810) % ((max) - (min) + 1))

spriteset (s_full_station) {
    t_full("dec_full_station_0",0)
    t_nochange("dec_full_station_0",1)
    t_nochange("dec_full_station_0",2)
    t_nochange("dec_full_station_0",3)
    t_nochange("dec_full_station_0",4)
    t_nochange("dec_full_station_0",5)
    t_nochange("dec_full_station_0",6)
    t_nochange("dec_full_station_0",7)
    t_nochange("dec_full_station_0",8)
    t_nochange("dec_full_station_0",9)
    t_nochange("dec_full_station_0",10)
    t_nochange("dec_full_station_0",11)
    t_nochange("dec_full_station_0",12)
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
}

spriteset (s_full_station_1) {
    t_full("dec_full_station_1",0)
    t_nochange("dec_full_station_1",1)
    t_nochange("dec_full_station_1",2)
    t_nochange("dec_full_station_1",3)
    t_nochange("dec_full_station_1",4)
    t_nochange("dec_full_station_1",5)
    t_nochange("dec_full_station_1",6)
    t_nochange("dec_full_station_1",7)
    t_nochange("dec_full_station_1",8)
    t_nochange("dec_full_station_1",9)
    t_nochange("dec_full_station_1",10)
    t_nochange("dec_full_station_1",11)
    t_nochange("dec_full_station_1",12)
    t_nochange("dec_full_station_1",13)
    t_nochange("dec_full_station_1",14)
    t_nochange("dec_full_station_1",15)
    t_nochange("dec_full_station_1",16)
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        198: RANDOM(7,9);
        199: RANDOM(7,9);
        200: RANDOM(7,9);
        201: RANDOM(7,9);
        202: RANDOM(7,9);
    }
    recolour_sprite {
        0..255: 0;
    }
}

spritelayout sl_full_station_x {
    ground {sprite: GROUNDSPRITE_NORMAL;}
    building { // fence
        sprite: CUSTOM(0,0);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5);
    }
    building { // fence
        sprite: CUSTOM(0,1);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6);
    }
    building { // fence
        sprite: CUSTOM(0,2);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);
    }
    building { // fence
        sprite: CUSTOM(0,3);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);
    }
    building {
        sprite: CUSTOM(1,0);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(1, (LOAD_TEMP(10) % 4) + 13);
    }
    childsprite {
        sprite: CUSTOM(1,5);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(7);
    }
    childsprite {
        sprite: CUSTOM(1,6);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(8);
    }
    childsprite {
        sprite: CUSTOM(1,7);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(6);
    }
    childsprite {
        sprite: CUSTOM(1,8);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(5);
    }
    childsprite {
        sprite: CUSTOM(1,1);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(5) || LOAD_TEMP(7);
    }
    childsprite {
        sprite: CUSTOM(1,2);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(6) || LOAD_TEMP(8);
    }
    childsprite {
        sprite: CUSTOM(1,3);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(5) || LOAD_TEMP(8);
    }
    childsprite {
        sprite: CUSTOM(1,4);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(6) || LOAD_TEMP(7);
    }
    childsprite {
        sprite: CUSTOM(1,9);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 3, 1) || !(LOAD_TEMP(5) && LOAD_TEMP(7));
    }
    childsprite {
        sprite: CUSTOM(1,10);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 0, 1) || !(LOAD_TEMP(6) && LOAD_TEMP(8));
    }
    childsprite {
        sprite: CUSTOM(1,11);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 1, 1) || !(LOAD_TEMP(5) && LOAD_TEMP(8));
    }
    childsprite {
        sprite: CUSTOM(1,12);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 2, 1) || !(LOAD_TEMP(6) && LOAD_TEMP(7));
    }

}

spritelayout sl_full_station_y {
    ground {sprite: GROUNDSPRITE_NORMAL;}
    building { // fence
        sprite: CUSTOM(0,2);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5);
    }
    building { // fence
        sprite: CUSTOM(0,3);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6);
    }
    building { // fence
        sprite: CUSTOM(0,0);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);
    }
    building { // fence
        sprite: CUSTOM(0,1);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);
    }
}

spritelayout sl_full_station_x_1 {
    ground {
        sprite: CUSTOM(1,0);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(1, (LOAD_TEMP(10) % 4) + 17);}
    building { // fence
        sprite: CUSTOM(0,0);
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(5);
    }
    building { // fence
        sprite: CUSTOM(0,1);
        xoffset: 15;
        xextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(6);
    }
    building { // fence
        sprite: CUSTOM(0,2);
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(7);
    }
    building { // fence
        sprite: CUSTOM(0,3);
        yoffset: 15;
        xextent: 16;
        yextent: 1;
        zextent: 8;
        hide_sprite: LOAD_TEMP(8);
    }
    building {
        sprite: CUSTOM(1,0);
        recolour_mode: RECOLOUR_REMAP;
        palette: CUSTOM(1,21); // invisible
    }
    childsprite {
        sprite: CUSTOM(1,5);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(7);
    }
    childsprite {
        sprite: CUSTOM(1,6);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(8);
    }
    childsprite {
        sprite: CUSTOM(1,7);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(6);
    }
    childsprite {
        sprite: CUSTOM(1,8);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(5);
    }
    childsprite {
        sprite: CUSTOM(1,1);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(5) || LOAD_TEMP(7);
    }
    childsprite {
        sprite: CUSTOM(1,2);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(6) || LOAD_TEMP(8);
    }
    childsprite {
        sprite: CUSTOM(1,3);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(5) || LOAD_TEMP(8);
    }
    childsprite {
        sprite: CUSTOM(1,4);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: LOAD_TEMP(6) || LOAD_TEMP(7);
    }
    childsprite {
        sprite: CUSTOM(1,13);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 3, 1) || !(LOAD_TEMP(5) && LOAD_TEMP(7));
    }
    childsprite {
        sprite: CUSTOM(1,14);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 0, 1) || !(LOAD_TEMP(6) && LOAD_TEMP(8));
    }
    childsprite {
        sprite: CUSTOM(1,15);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 1, 1) || !(LOAD_TEMP(5) && LOAD_TEMP(8));
    }
    childsprite {
        sprite: CUSTOM(1,16);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: getbits(LOAD_TEMP(9), 2, 1) || !(LOAD_TEMP(6) && LOAD_TEMP(7));
    }
    childsprite {
        sprite: CUSTOM(1,11);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: !(!LOAD_TEMP(5) && LOAD_TEMP(8));
    }
    childsprite {
        sprite: CUSTOM(1,12);
        recolour_mode: RECOLOUR_REMAP;
        palette: platform_recolour_0(LOAD_TEMP(1));
        hide_sprite: !(LOAD_TEMP(6) && !LOAD_TEMP(7));
    }

}

switch (FEAT_STATIONS, SELF, sw_full_station_0, [
    STORE_TEMP((terrain_type == TILETYPE_SNOW  ) << 1|
               (terrain_type == TILETYPE_DESERT) << 0, 0), // returns 1|2 for desert|snow
    STORE_TEMP(param_build_date >= 2 ?
               param_build_date - 2:
               param_build_date ?
                (current_date < date(1952, 1, 1)) +
                (current_date < date(1986, 1, 1)) :
                (build_date   < date(1952, 1, 1)) +
                (build_date   < date(1986, 1, 1)) , 1), // returns 2 if build date is before 1952, 1 if before 1986
    STORE_TEMP(animation_frame, 2), // animation frames
    //STORE_TEMP(hasbit(rail_continuation, 1), 3), // bufferstop
    //STORE_TEMP(hasbit(rail_continuation, 0), 4), // bufferstop
    STORE_TEMP(nearby_tile_is_station(-1, 0), 5), // get nearby station tiles
    STORE_TEMP(nearby_tile_is_station( 1, 0), 6), // get nearby station tiles
    STORE_TEMP(nearby_tile_is_station( 0,-1) &&   // also get the landscape
               (!hasbit(nearby_tile_slope(0,0), CORNER_S) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_W) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_N)), 7),
    STORE_TEMP(nearby_tile_is_station( 0, 1) &&
               (!hasbit(nearby_tile_slope(0,0), CORNER_N) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_E) ||
                 hasbit(nearby_tile_slope(0,0), CORNER_S)), 8),
    STORE_TEMP(nearby_tile_is_station( 1, 1) << 0|
               nearby_tile_is_station(-1, 1) << 1|
               nearby_tile_is_station( 1,-1) << 2|
               nearby_tile_is_station(-1,-1) << 3, 9),
    STORE_TEMP(random_bits_tile, 10)
]){return;}

switch(FEAT_STATIONS, SELF, sw_full_station_1, [
    STORE_TEMP(0,0),
    STORE_TEMP(param_build_date >= 2 ?
               param_build_date - 2:
               param_build_date ?
                (current_date < date(1952, 1, 1)) +
                (current_date < date(1986, 1, 1)) :
                (build_date   < date(1952, 1, 1)) +
                (build_date   < date(1986, 1, 1)) , 1),
    STORE_TEMP(1,2),
    //STORE_TEMP(0,3),
    //STORE_TEMP(1,4),
    STORE_TEMP(0,5),
    STORE_TEMP(0,6),
    STORE_TEMP(0,7),
    STORE_TEMP(0,8),
    //STORE_TEMP(0,9),
    STORE_TEMP(0,10),
    //STORE_TEMP(3,11),
    //STORE_TEMP(1,12),
]){return;}

item (FEAT_STATIONS, stn_full_station_0) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       0;
        hide_wire_tiles:        STAT_ALL_TILES;
        non_traversable_tiles:  STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_full_station_x, sl_full_station_y];
        custom_spritesets:          [s_fence_test_station, s_full_station];
        prepare_layout:             sw_full_station_0();
        purchase_prepare_layout:    sw_full_station_1();
        //default:                    s_dummy;
        //PASS:                       sg_people_test_station;
    }
}

item (FEAT_STATIONS, stn_full_station_1) {
    property {
        class:                  "WSJT";
        classname:              string(CLS_WSJT);
        name:                   string(STN_TEST_STATION);
        draw_pylon_tiles:       0;
        hide_wire_tiles:        STAT_ALL_TILES;
        non_traversable_tiles:  STAT_ALL_TILES;
    }
    graphics {
        sprite_layouts:             [sl_full_station_x_1, sl_full_station_y];
        custom_spritesets:          [s_fence_test_station, s_full_station_1];
        prepare_layout:             sw_full_station_0();
        purchase_prepare_layout:    sw_full_station_1();
        //default:                    s_dummy;
        //PASS:                       sg_people_test_station;
    }
}

